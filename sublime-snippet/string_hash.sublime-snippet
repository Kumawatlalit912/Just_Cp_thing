<snippet>
	<content><![CDATA[
// requires modular library

Mint p = 67;
Mint pinv = p.inv();
vector<Mint> rdx(1, 1), rdxi(1, 1);

map<char, int> M;

bool pre_calc = false;

void pre() {
  int i = 1;
  for (char j = '0'; j <= '9'; j++) M[j] = i++;
  for (char j = 'A'; j <= 'Z'; j++) M[j] = i++;
  for (char j = 'a'; j <= 'z'; j++) M[j] = i++;
}

struct Hash {
  string s;
  int length;
  vector<Mint> pref, suf;

  void fillprefHash() {
    Mint h = 0;
    for (int i = 0; i < length; i++) {
      h = (h + rdx[i] * M[s[i]]);
      pref[i] = h;
    }
  }

  void fillsufHash() {
    Mint h = 0;
    for (int i = 0; i < length; i++) {
      h = (h + rdx[i] * M[s[length - 1 - i]]);
      suf[i] = h;
    }
  }

  Hash() {}

  Hash(string _s) : s(_s){
    if (!pre_calc) {
      pre_calc = 1;
      pre();
    }
    length = sz(s);
    while (sz(rdx) < length) {
      rdx.pb(rdx.back() * p);
      rdxi.pb(rdxi.back() * pinv);
    }
    pref.assign(length, 0);
    suf.assign(length, 0);
    fillprefHash();
    fillsufHash();
  }

  Mint fwd (int i, int j) {
    Mint left = (i != 0)? pref[i - 1]: 0;
    Mint right = pref[j];
    Mint h = right - left;
    return h * rdxi[i];
  }

  Mint bwd (int i, int j) {
    swap(i, j);
    i = length - 1 - i;
    j = length - 1 - j;
    Mint left = (i != 0)? suf[i - 1]: 0;
    Mint right = suf[j];
    Mint h = right - left;
    return h * rdxi[i];
  }
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>string_hash</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
